{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _toArray(arr) {\n  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/*\nCopyright Â© 2015 by Coursera\nLicensed under the Apache License 2.0, seen https://github.com/coursera/react-imgix/blob/master/LICENSE\n\nMinor syntax modifications have been made\n*/\n\nvar PACKAGE_VERSION = \"9.7.0\";\nimport ImgixClient from \"@imgix/js-core\";\nimport extractQueryParams from \"./extractQueryParams\";\n\n// @see https://www.imgix.com/docs/reference\nvar PARAM_EXPANSION = Object.freeze({\n  // Adjustment\n  brightness: \"bri\",\n  contrast: \"con\",\n  exposure: \"exp\",\n  gamma: \"gam\",\n  highlights: \"high\",\n  hue: \"hue\",\n  invert: \"invert\",\n  saturation: \"sat\",\n  shaddows: \"shad\",\n  shadows: \"shad\",\n  sharpness: \"sharp\",\n  \"unsharp-mask\": \"usm\",\n  \"unsharp-radius\": \"usmrad\",\n  vibrance: \"vib\",\n  // Automatic\n  \"auto-features\": \"auto\",\n  // Background\n  \"background-color\": \"bg\",\n  // Blend\n  blend: \"blend\",\n  \"blend-mode\": \"bm\",\n  \"blend-align\": \"ba\",\n  \"blend-alpha\": \"balph\",\n  \"blend-padding\": \"bp\",\n  \"blend-width\": \"bw\",\n  \"blend-height\": \"bh\",\n  \"blend-fit\": \"bf\",\n  \"blend-crop\": \"bc\",\n  \"blend-size\": \"bs\",\n  \"blend-x\": \"bx\",\n  \"blend-y\": \"by\",\n  // Border & Padding\n  border: \"border\",\n  padding: \"pad\",\n  // Face Detection\n  \"face-index\": \"faceindex\",\n  \"face-padding\": \"facepad\",\n  faces: \"faces\",\n  // Format\n  \"chroma-subsampling\": \"chromasub\",\n  \"color-quantization\": \"colorquant\",\n  download: \"dl\",\n  DPI: \"dpi\",\n  format: \"fm\",\n  \"lossless-compression\": \"lossless\",\n  quality: \"q\",\n  // Mask\n  \"mask-image\": \"mask\",\n  // Mask\n  \"noise-blur\": \"nr\",\n  \"noise-sharpen\": \"nrs\",\n  // Palette n/a\n  // PDF n/a\n  // Pixel Density n/a\n\n  // Rotation\n  \"flip-direction\": \"flip\",\n  orientation: \"or\",\n  \"rotation-angle\": \"rot\",\n  // Size\n  \"crop-mode\": \"crop\",\n  \"fit-mode\": \"fit\",\n  \"image-height\": \"h\",\n  \"image-width\": \"w\",\n  // Stylize\n  blurring: \"blur\",\n  halftone: \"htn\",\n  monotone: \"mono\",\n  pixelate: \"px\",\n  \"sepia-tone\": \"sepia\",\n  // Trim TODO\n  // Watermark TODO\n\n  // Extra\n  height: \"h\",\n  width: \"w\"\n});\nvar DEFAULT_OPTIONS = Object.freeze({\n  auto: \"format\" // http://www.imgix.com/docs/reference/automatic#param-auto\n});\n\n/**\n * Construct a URL for an image with an Imgix proxy, expanding image options\n * per the [API reference docs](https://www.imgix.com/docs/reference).\n * @param  {String} src         src of raw image\n * @param  {Object} longImgixParams map of image API options, in long or short form per expansion rules\n * @return {String}             URL of image src transformed by Imgix\n */\nfunction constructUrl(src, longImgixParams, srcOptions) {\n  if (!src) {\n    return \"\";\n  }\n  var params = compactParamKeys(longImgixParams);\n  var _extractClientAndPath = extractClientAndPathComponents(src),\n    client = _extractClientAndPath.client,\n    pathComponents = _extractClientAndPath.pathComponents;\n  return client.buildURL(pathComponents.join(\"/\"), params, srcOptions);\n}\nfunction compactParamKeys(longImgixParams) {\n  var keys = Object.keys(longImgixParams);\n  var keysLength = keys.length;\n  var params = {};\n  for (var i = 0; i < keysLength; i++) {\n    var key = keys[i];\n    if (PARAM_EXPANSION[key]) {\n      params[PARAM_EXPANSION[key]] = longImgixParams[key];\n    } else {\n      params[key] = longImgixParams[key];\n    }\n  }\n  return params;\n}\nfunction extractClientAndPathComponents(src) {\n  var _src$split = src.split(\"://\"),\n    _src$split2 = _slicedToArray(_src$split, 2),\n    scheme = _src$split2[0],\n    rest = _src$split2[1];\n  var _rest$split = rest.split(\"/\"),\n    _rest$split2 = _toArray(_rest$split),\n    domain = _rest$split2[0],\n    pathComponents = _rest$split2.slice(1);\n  var useHTTPS = scheme == \"https\";\n  var client = new ImgixClient({\n    domain: domain,\n    useHTTPS: useHTTPS,\n    includeLibraryParam: false\n  });\n  return {\n    client: client,\n    pathComponents: pathComponents\n  };\n}\nfunction buildURLPublic(src) {\n  var imgixParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var disableLibraryParam = options.disableLibraryParam;\n  var _extractQueryParams = extractQueryParams(src),\n    _extractQueryParams2 = _slicedToArray(_extractQueryParams, 2),\n    rawSrc = _extractQueryParams2[0],\n    params = _extractQueryParams2[1];\n  return constructUrl(rawSrc, _extends({}, params, imgixParams, disableLibraryParam ? {} : {\n    ixlib: \"react-\".concat(PACKAGE_VERSION)\n  }));\n}\nexport default constructUrl;\nexport { buildURLPublic, compactParamKeys, extractClientAndPathComponents };","map":{"version":3,"mappings":"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","names":["PACKAGE_VERSION","ImgixClient","extractQueryParams","PARAM_EXPANSION","Object","freeze","brightness","contrast","exposure","gamma","highlights","hue","invert","saturation","shaddows","shadows","sharpness","vibrance","blend","border","padding","faces","download","DPI","format","quality","orientation","blurring","halftone","monotone","pixelate","height","width","DEFAULT_OPTIONS","auto","constructUrl","src","longImgixParams","srcOptions","params","compactParamKeys","extractClientAndPathComponents","client","pathComponents","buildURL","join","keys","keysLength","length","i","key","split","_src$split2","scheme","rest","_rest$split2","domain","useHTTPS","includeLibraryParam","buildURLPublic","imgixParams","options","disableLibraryParam","_extractQueryParams2","rawSrc","_extends","ixlib"],"sources":["C:\\Users\\chels\\CS494\\Forms-of-Migration-Website\\node_modules\\react-imgix\\src\\constructUrl.js"],"sourcesContent":["/*\nCopyright Â© 2015 by Coursera\nLicensed under the Apache License 2.0, seen https://github.com/coursera/react-imgix/blob/master/LICENSE\n\nMinor syntax modifications have been made\n*/\n\nconst PACKAGE_VERSION = require(\"../package.json\").version;\nimport ImgixClient from \"@imgix/js-core\";\nimport extractQueryParams from \"./extractQueryParams\";\n\n// @see https://www.imgix.com/docs/reference\nvar PARAM_EXPANSION = Object.freeze({\n  // Adjustment\n  brightness: \"bri\",\n  contrast: \"con\",\n  exposure: \"exp\",\n  gamma: \"gam\",\n  highlights: \"high\",\n  hue: \"hue\",\n  invert: \"invert\",\n  saturation: \"sat\",\n  shaddows: \"shad\",\n  shadows: \"shad\",\n  sharpness: \"sharp\",\n  \"unsharp-mask\": \"usm\",\n  \"unsharp-radius\": \"usmrad\",\n  vibrance: \"vib\",\n\n  // Automatic\n  \"auto-features\": \"auto\",\n\n  // Background\n  \"background-color\": \"bg\",\n\n  // Blend\n  blend: \"blend\",\n  \"blend-mode\": \"bm\",\n  \"blend-align\": \"ba\",\n  \"blend-alpha\": \"balph\",\n  \"blend-padding\": \"bp\",\n  \"blend-width\": \"bw\",\n  \"blend-height\": \"bh\",\n  \"blend-fit\": \"bf\",\n  \"blend-crop\": \"bc\",\n  \"blend-size\": \"bs\",\n  \"blend-x\": \"bx\",\n  \"blend-y\": \"by\",\n\n  // Border & Padding\n  border: \"border\",\n  padding: \"pad\",\n\n  // Face Detection\n  \"face-index\": \"faceindex\",\n  \"face-padding\": \"facepad\",\n  faces: \"faces\",\n\n  // Format\n  \"chroma-subsampling\": \"chromasub\",\n  \"color-quantization\": \"colorquant\",\n  download: \"dl\",\n  DPI: \"dpi\",\n  format: \"fm\",\n  \"lossless-compression\": \"lossless\",\n  quality: \"q\",\n\n  // Mask\n  \"mask-image\": \"mask\",\n\n  // Mask\n  \"noise-blur\": \"nr\",\n  \"noise-sharpen\": \"nrs\",\n\n  // Palette n/a\n  // PDF n/a\n  // Pixel Density n/a\n\n  // Rotation\n  \"flip-direction\": \"flip\",\n  orientation: \"or\",\n  \"rotation-angle\": \"rot\",\n\n  // Size\n  \"crop-mode\": \"crop\",\n  \"fit-mode\": \"fit\",\n  \"image-height\": \"h\",\n  \"image-width\": \"w\",\n\n  // Stylize\n  blurring: \"blur\",\n  halftone: \"htn\",\n  monotone: \"mono\",\n  pixelate: \"px\",\n  \"sepia-tone\": \"sepia\",\n\n  // Trim TODO\n  // Watermark TODO\n\n  // Extra\n  height: \"h\",\n  width: \"w\",\n});\n\nvar DEFAULT_OPTIONS = Object.freeze({\n  auto: \"format\", // http://www.imgix.com/docs/reference/automatic#param-auto\n});\n\n/**\n * Construct a URL for an image with an Imgix proxy, expanding image options\n * per the [API reference docs](https://www.imgix.com/docs/reference).\n * @param  {String} src         src of raw image\n * @param  {Object} longImgixParams map of image API options, in long or short form per expansion rules\n * @return {String}             URL of image src transformed by Imgix\n */\nfunction constructUrl(src, longImgixParams, srcOptions) {\n  if (!src) {\n    return \"\";\n  }\n  const params = compactParamKeys(longImgixParams);\n  const { client, pathComponents } = extractClientAndPathComponents(src);\n  return client.buildURL(pathComponents.join(\"/\"), params, srcOptions);\n}\n\nfunction compactParamKeys(longImgixParams) {\n  const keys = Object.keys(longImgixParams);\n  const keysLength = keys.length;\n  const params = {};\n  for (let i = 0; i < keysLength; i++) {\n    let key = keys[i];\n    if (PARAM_EXPANSION[key]) {\n      params[PARAM_EXPANSION[key]] = longImgixParams[key];\n    } else {\n      params[key] = longImgixParams[key];\n    }\n  }\n\n  return params;\n}\n\nfunction extractClientAndPathComponents(src) {\n  const [scheme, rest] = src.split(\"://\");\n  const [domain, ...pathComponents] = rest.split(\"/\");\n  let useHTTPS = scheme == \"https\";\n\n  const client = new ImgixClient({\n    domain: domain,\n    useHTTPS: useHTTPS,\n    includeLibraryParam: false,\n  });\n\n  return { client, pathComponents };\n}\n\nfunction buildURLPublic(src, imgixParams = {}, options = {}) {\n  const { disableLibraryParam } = options;\n\n  const [rawSrc, params] = extractQueryParams(src);\n\n  return constructUrl(\n    rawSrc,\n    Object.assign(\n      {},\n      params,\n      imgixParams,\n      disableLibraryParam ? {} : { ixlib: `react-${PACKAGE_VERSION}` }\n    )\n  );\n}\n\nexport default constructUrl;\n\nexport { buildURLPublic, compactParamKeys, extractClientAndPathComponents };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}